# Genellikle sadece bir tane container yeterli olmaz. Örneğin
# veritabanı serverı için bir container, backend için başka
# bir container vs gerekebilir. Docker içerisinde farklı sanal
# ağların kurulması, portların expose edilmesi gerekebilir. Tüm
# bu konfügürasyonları compose ile yapabiliriz. Compose bir CLI
# ve YAML formatında bir konfügürasyon dosyasından oluşur. YAML
# dosyasının versiyonları vardır ve her versiyon dosya içerisinde
# hangi konfügürasyonları yapabileceğimizi belirler. Örnek bir
# dosya formatı aşağıdaki gibidir:

# Versiyon belirtmezsek default olarak v1 kullanılır.
version: 

# Servisle kastedilen containerlardır.
services:  
  # Servis ismi containerın ismi olacaktır. İsim verirken dikkat
  # etmeliyiz çünkü network içerisinde DNS ismi olarakta kullanılacak.
  servicename: 
    # Containerda koşacak image
    image: 
    # Varsayılan container komutu
    command: 
    # Ortam değişkenleri
    environment: 
    # Volume bilgileri
    volumes: 
  servicename2:

# Haricen volume oluşturmak için(docker volume create)
volumes: 

# Haricen ağlar oluşturmak için(docker network create)
networks: 

# YAML dosyasını key-value ikilileri gibi düşünebiliriz. Sağ kısımda
# tek bir değer de olabilir bir liste de olabilir. Eğer liste varsa
# - ile değerleri ayırıyoruz:
  image:alpine
  ports: 
    -40:80 
    -30:3006 

# Network konfügürasyonu belirtilmediğinde varsayılan olarak [dizin_ismi]_default
# isimli bir ağ oluşturulur ve tüm containerlar bu ağa bağlanır.

# docker-compose dosyası içerisinde image build edebiliriz.
# Böylece komutlar koşmadan önce hazır bir image olduğunu garanti ederiz.
# Image her seferinde build edilmez sadece bulunamadığı zaman build edilir.

version: '2'

services:
  proxy:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    ports:
      - '80:80'
  web:
    image: httpd
    volumes:
      - ./html:/usr/local/apache2/htdocs/

# Eğer imagei yeniden build etmek istiyorsak docker compose up --build  ve ya
# docker-compose build komutlarını kullanabiliriz.